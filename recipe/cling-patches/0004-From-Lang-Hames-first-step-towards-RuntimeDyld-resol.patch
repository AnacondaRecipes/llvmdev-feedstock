From f1451066d61fcfa88513e4f66b3a60d363ab8518 Mon Sep 17 00:00:00 2001
From: Axel Naumann <Axel.Naumann@cern.ch>
Date: Wed, 4 May 2016 11:01:25 +0200
Subject: [PATCH 04/10] From Lang Hames: first step towards RuntimeDyld
 resolving weak symbols.

---
 lib/ExecutionEngine/MCJIT/MCJIT.cpp               |  5 +-
 lib/ExecutionEngine/MCJIT/MCJIT.h                 |  4 +-
 lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp   | 62 ++++++++++++++++++++++-
 lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h |  9 ++++
 4 files changed, 75 insertions(+), 5 deletions(-)

diff --git a/lib/ExecutionEngine/MCJIT/MCJIT.cpp b/lib/ExecutionEngine/MCJIT/MCJIT.cpp
index 30f18db..186451f 100644
--- a/lib/ExecutionEngine/MCJIT/MCJIT.cpp
+++ b/lib/ExecutionEngine/MCJIT/MCJIT.cpp
@@ -203,6 +203,9 @@ void MCJIT::generateCodeForModule(Module *M) {
 
   // If the cache did not contain a suitable object, compile the object
   if (!ObjectToLoad) {
+
+    OwnedModules.markModuleAsLoaded(M);
+
     ObjectToLoad = emitObject(M);
     assert(ObjectToLoad && "Compilation did not produce an object.");
   }
@@ -228,8 +231,6 @@ void MCJIT::generateCodeForModule(Module *M) {
 
   Buffers.push_back(std::move(ObjectToLoad));
   LoadedObjects.push_back(std::move(*LoadedObject));
-
-  OwnedModules.markModuleAsLoaded(M);
 }
 
 void MCJIT::finalizeLoadedModules() {
diff --git a/lib/ExecutionEngine/MCJIT/MCJIT.h b/lib/ExecutionEngine/MCJIT/MCJIT.h
index e25f76c..dd5b4de 100644
--- a/lib/ExecutionEngine/MCJIT/MCJIT.h
+++ b/lib/ExecutionEngine/MCJIT/MCJIT.h
@@ -34,10 +34,10 @@ public:
 
   RuntimeDyld::SymbolInfo findSymbol(const std::string &Name) override;
 
-  // MCJIT doesn't support logical dylibs.
+  // Defer to the client resolver for lookup in logical dylibs.
   RuntimeDyld::SymbolInfo
   findSymbolInLogicalDylib(const std::string &Name) override {
-    return nullptr;
+    return ClientResolver->findSymbolInLogicalDylib(Name);
   }
 
 private:
diff --git a/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp b/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp
index 60479d4..4397a7b 100644
--- a/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp
+++ b/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp
@@ -199,6 +199,9 @@ RuntimeDyldImpl::loadObjectImpl(const object::ObjectFile &Obj) {
   // Common symbols requiring allocation, with their sizes and alignments
   CommonSymbolList CommonSymbols;
 
+  // Weak symbols.
+  WeakSymbolList WeakSymbols;
+
   // Parse symbols
   DEBUG(dbgs() << "Parse symbols:\n");
   for (symbol_iterator I = Obj.symbol_begin(), E = Obj.symbol_end(); I != E;
@@ -207,7 +210,13 @@ RuntimeDyldImpl::loadObjectImpl(const object::ObjectFile &Obj) {
 
     if (Flags & SymbolRef::SF_Common)
       CommonSymbols.push_back(*I);
-    else {
+    else if (Flags & SymbolRef::SF_Weak) {
+      ErrorOr<section_iterator> SIOrErr = I->getSection();
+      Check(SIOrErr.getError());
+      section_iterator SI = *SIOrErr;
+      assert(SI != Obj.section_end() && "Weak symbol doesn't have section?");
+      WeakSymbols.push_back(std::make_pair(I, SI));
+    } else {
 
       // Get the symbol type.
       object::SymbolRef::Type SymType;
@@ -283,6 +292,9 @@ RuntimeDyldImpl::loadObjectImpl(const object::ObjectFile &Obj) {
     }
   }
 
+  // Finalize weak symbols
+  emitWeakSymbols(Obj, LocalSections, WeakSymbols);
+
   // Allocate common symbols
   if (auto Err = emitCommonSymbols(Obj, CommonSymbols))
     return std::move(Err);
@@ -565,6 +577,54 @@ void RuntimeDyldImpl::writeBytesUnaligned(uint64_t Value, uint8_t *Dst,
   }
 }
 
+void RuntimeDyldImpl::emitWeakSymbols(const ObjectFile &Obj,
+                                      ObjSectionToIDMap &LocalSections,
+                                      WeakSymbolList &WeakSymbols) {
+  if (WeakSymbols.empty())
+    return;
+
+  DEBUG(dbgs() << "Processing weak symbols...\n");
+
+  for (const auto &SymAndSection : WeakSymbols) {
+    const SymbolRef &Sym = *SymAndSection.first;
+    ErrorOr<StringRef> NameOrErr = Sym.getName();
+    Check(NameOrErr.getError());
+    StringRef Name = *NameOrErr;
+
+    // Skip weak symbols already elsewhere.
+    if (GlobalSymbolTable.count(Name) ||
+        Resolver.findSymbolInLogicalDylib(Name)) {
+      DEBUG(dbgs() << "\tSkipping already emitted weak symbol '" << Name
+                   << "'\n");
+      continue;
+    }
+
+    // Ok - this is the first definition encountered. Finalize it.
+    section_iterator SI = SymAndSection.second;
+
+    uint32_t Flags = Sym.getFlags();
+    JITSymbolFlags RTDyldSymFlags = JITSymbolFlags::None;
+    if (Flags & SymbolRef::SF_Exported)
+      RTDyldSymFlags |= JITSymbolFlags::Exported;
+
+    uint64_t SectOffset;
+    Check(getOffset(Sym, *SI, SectOffset));
+    bool IsCode = SI->isText();
+    unsigned SectionID = findOrEmitSection(Obj, *SI, IsCode, LocalSections);
+
+    DEBUG(
+      object::SymbolRef::Type SymType = Sym.getType();
+      dbgs() << "\tWeak symbol: Type: " << SymType << " Name: " << Name
+             << " SID: " << SectionID << " Offset: "
+             << format("%p", (uintptr_t)SectOffset)
+             << " flags: " << Flags << "\n"
+    );
+    GlobalSymbolTable[Name] =
+      SymbolTableEntry(SectionID, SectOffset, RTDyldSymFlags);
+  }
+
+}
+
 Error RuntimeDyldImpl::emitCommonSymbols(const ObjectFile &Obj,
                                          CommonSymbolList &CommonSymbols) {
   if (CommonSymbols.empty())
diff --git a/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h b/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h
index 76bd3fc..64ac4d3 100644
--- a/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h
+++ b/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h
@@ -250,6 +250,10 @@ protected:
   // Keep a map of common symbols to their info pairs
   typedef std::vector<SymbolRef> CommonSymbolList;
 
+  // A list of weak symbols and their section/offset pairs.
+  typedef std::vector<std::pair<symbol_iterator, section_iterator>>
+    WeakSymbolList;
+
   // For each symbol, keep a list of relocations based on it. Anytime
   // its address is reassigned (the JIT re-compiled the function, e.g.),
   // the relocations get re-resolved.
@@ -345,6 +349,11 @@ protected:
   /// Dst.
   void writeBytesUnaligned(uint64_t Value, uint8_t *Dst, unsigned Size) const;
 
+  /// \brief Process the weak symbols encountered while loading an object file
+  /// and finalize definitions.
+  void emitWeakSymbols(const ObjectFile &Obj, ObjSectionToIDMap &LocalSections,
+                       WeakSymbolList &WeakSymbols);
+
   /// \brief Given the common symbols discovered in the object file, emit a
   /// new section for them and update the symbol mappings in the object and
   /// symbol table.
-- 
2.7.4


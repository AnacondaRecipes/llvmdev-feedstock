{% set version = "9.0.0.rc2" %}
{% set sha256 = "0258418317820df7335d3687a44b61a6bd313992f1600a504146ce3f53298628" %}

{% set build_number = 0 %}
{% set major_ver = version.split(".")[0] %}

package:
  name: llvm-package
  version: {{ version }}

source:
  url: http://prereleases.llvm.org/9.0.0/rc2/llvm-9.0.0rc2.src.tar.xz
  sha256: {{ sha256 }}
  patches:
    # TODO add back for sake of llvm-lit - partial-testing.patch
    - D47188-svml-VF.patch    # Fixes vectorizer and extends SVML support
    # Revert an upstream change for Numba
    # ref: https://github.com/numba/llvmlite/blob/v0.29.0/conda-recipes/0001-Revert-Limit-size-of-non-GlobalValue-name.patch
    - 0001-Revert-Limit-size-of-non-GlobalValue-name.patch


build:
  number: {{ build_number }}
  skip:  true  # [(win and vc<14) or aarch64 or ppc64le]
  merge_build_host: False

requirements:
  build:
    - {{ compiler('cxx') }}   # [not osx]
    - cmake
    - ninja     # [win]
    - python    >=3
    - make
    - libcxx {{cxx_compiler_version}}  # [osx]
  host:
    - libcxx {{cxx_compiler_version}}  # [osx]

outputs:
  # Contains everything
  - name: llvmdev
    script: install_llvm.sh                         # [not win]
    script: install_llvm.bat                        # [win]
    build:
      skip:  true  # [(win and vc<14) or aarch64 or ppc64le]
      activate_in_script: True
    requirements:
      build:
        - {{ compiler('cxx') }}    # [not osx]
        - cmake
        - ninja     # [win]
        - python    >=3
      host:
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}
        - {{ pin_subpackage("llvm-tools", exact=True) }}
      run:
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}
        - {{ pin_subpackage("llvm-tools", exact=True) }}
        - libcxx >={{ cxx_compiler_version }}  # [osx]
    test:
      commands:
        - $PREFIX/bin/llvm-config --libs                         # [not win]
        - if not exist %LIBRARY_INC%\\llvm\\Pass.h exit 1        # [win]
        - test -f $PREFIX/include/llvm/Pass.h                    # [unix]
        - test -f $PREFIX/lib/libLLVMCore.a                      # [not win]

  # Contains the shared libraries. To make different LLVM libraries co-installable
  # soversion is appended to the package name.
  - name: libllvm{{ major_ver }}
    script: install_llvm.sh                         # [not win]
    build:
      skip:  true  # [(win and vc<14) or aarch64 or ppc64le]
      activate_in_script: True
      run_exports:                                                 # [not win]
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}  # [not win]
    requirements:
      build:
        - {{ compiler('cxx') }}    # [not (osx or win)]
        - cmake                    # [not win]
        - python    >=3            # [not win]
      host:
      run:
        - libcxx >={{ cxx_compiler_version }}  # [osx]
    test:
      commands:
        - test -f $PREFIX/lib/libLLVM-{{ major_ver }}${SHLIB_EXT}  # [unix]

  # This is a meta package so that people can use the latest libllvm and also
  # for run_exports
  - name: llvm
    build:
      skip:  true  # [(win and vc<14) or aarch64 or ppc64le]
      run_exports:                                                 # [not win]
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}  # [not win]
    requirements:
      build:
      host:
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}  # [not win]
      run:                                                         # [not win]
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}  # [not win]
      run_constrained:                                             # [not win]
        - llvmdev   {{ version }}                                  # [not win]
    test:
      commands:
        - echo "Hello World!"

  # Contains LLVM tools
  - name: llvm-tools
    script: install_llvm.sh                         # [not win]
    script: install_llvm.bat                        # [win]
    build:
      skip:  true  # [(win and vc<14) or aarch64 or ppc64le]
      activate_in_script: True
    requirements:
      build:
        - {{ compiler('cxx') }}    # [not osx]
        - cmake
        - ninja     # [win]
        - python    >=3
      host:
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}
      run:
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}
      run_constrained:
        - llvmdev   {{ version }}
    test:
      commands:
        - $PREFIX/bin/llc -version                               # [not win]
        - if not exist "%LIBRARY_BIN%"\\llc.exe exit 1           # [win]
        - llc -version                                           # [win]

  - name: lit
    build:
      noarch: python
      script: "python -m pip install utils/lit --no-deps -vv"
      activate_in_script: True
      skip: True  # [not linux]
      entry_points:
        - lit = lit:main
    requirements:
      host:
        - python >=3
        - pip
      run:
        - python
    test:
      imports:
        - lit

  # Contains LLVM utils
  - name: llvm-utils
    script: install_llvm.sh                         # [not win]
    script: install_llvm.bat                        # [win]
    build:
      skip:  true  # [(win and vc<14) or aarch64 or ppc64le]
      activate_in_script: True
    requirements:
      build:
        - {{ compiler('cxx') }}    # [not osx]
        - cmake
        - ninja     # [win]
        - python    >=3
      host:
        - {{ pin_subpackage("llvmdev", exact=True) }}
      run_constrained:
        - llvmdev   {{ version }}
    test:
      commands:
        - $PREFIX/bin/not false                               # [not win]
        - if not exist "%LIBRARY_BIN%"\\not.exe exit 1        # [win]


about:
  home: http://llvm.org/
  dev_url: https://github.com/llvm-mirror/llvm
  license: LLVM-Exception
  license_file: LICENSE.TXT
  license_family: Apache
  summary: Development headers and libraries for LLVM

extra:
  recipe-maintainers:
    - inducer
    - pitrou
    - jakirkham
    - mingwandroid
    - mattwala
    - SylvainCorlay
    - isuruf
